#include <Arduino.h>
#include <WiFi.h>
#include <WiFiMulti.h>
#include <WiFiClientSecure.h>
#include <ArduinoJson.h>
#include <SocketIoClient.h>
#include <Adafruit_Fingerprint.h>
#include <Adafruit_Fingerprint.h>
#include <HardwareSerial.h>
#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_ST7735.h> // Hardware-specific library for ST7735
#include <Adafruit_ST7789.h> // Hardware-specific library for ST7789
#include <SPI.h>

WiFiMulti WiFiMulti;

SocketIoClient webSocket;

void setup() {

  pinMode(RelayPin, OUTPUT);
  SPI.begin();      
  mfrc522.PCD_Init(); 
  digitalWrite(RelayPin, LOW);
  Serial.begin(9600);
  Serial.setDebugOutput(true);
  Serial2.begin(115200);
  while (!USE_SERIAL);
  delay(100);
  
  for (uint8_t t = 4; t > 0; t--) {
    USE_SERIAL.printf("[SETUP] BOOT WAIT %d...\n", t);
    tft.print("\nSetup Boot...");
    USE_SERIAL.flush();
    delay(1000);
  }
  
  WiFi.begin(ssid, pass);

  const char *ssid = "SSS";
  const char *pass = "Kawarizmi";
  const char *HOST = "104.196.232.237";

  WiFi.begin(ssid, pass);

  //WiFi.disconnect();
  while (WiFi.status() != WL_CONNECTED) {
    delay(100);
  }

  String ip = WiFi.localIP().toString();
  USE_SERIAL.printf("[SETUP] WiFi Connected %s\n", ip.c_str());
  tft.println("\nWifi Terhubung ");

 
 
   webSocket.on("event", event);
    webSocket.begin("my.socket-io.server");
    // use HTTP Basic Authorization this is optional remove if not needed
    webSocket.setAuthorization("username", "password");
  
}

unsigned long messageTimestamp = 0;

void loop() {
  Serial.println("Put your card to the reader...");
  Serial.println();
  
   webSocket.loop();
  
  uint64_t now = millis();
 
  if ( ! mfrc522.PICC_IsNewCardPresent()) 
  {
    return;
  }
  
  if ( ! mfrc522.PICC_ReadCardSerial()) 
  {
    return;
  }
  
  Serial.print("UID tag :");
  String content= "";
  byte letter;
  for (byte i = 0; i < mfrc522.uid.size; i++) 
  {
     Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
     Serial.print(mfrc522.uid.uidByte[i], HEX);
     content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
     content.concat(String(mfrc522.uid.uidByte[i], HEX));
  }
  Serial.println();
  Serial.print("Message : ");
  content.toUpperCase();
  
  if(content.substring(1) == "43 D4 CA 1B" ||content.substring(1) == "A4 B9 23 07") //change here the UID of the card/cards that you want to give access
  {
   
    DynamicJsonDocument doc(1024);
    JsonArray array = doc.to<JsonArray>();
    array.add("record");
    JsonObject param1 = array.createNestedObject();
    param1["code_tag"] = content.substring(1);
    String output;
    serializeJson(doc, output);
   

    Serial.println("Authorized access");
    Serial.println();
    digitalWrite(RelayPin, HIGH);
    Serial.println("HIDUP");
    delay(2000);
    digitalWrite(RelayPin, LOW);
    Serial.println("Hidup");
  }
  else{
    Serial.println(" Access denied");
    digitalWrite(RelayPin, LOW);
    Serial.println("Mati");
    delay(2000);
  }
}



